import os
from flask import Flask, request
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler

# --- Donn√©es des plateformes ---
plateformes = {
    "BoursoBank": {
        "lien": "https://www.boursobank.com/affiliation",
        "tuto": [
            "1Ô∏è‚É£ Rendez-vous sur le lien ci-dessus.",
            "2Ô∏è‚É£ Cr√©ez un compte.",
            "3Ô∏è‚É£ Copiez votre lien partenaire."
        ]
    },
    "Revolut": {
        "lien": "https://www.revolut.com/referral",
        "tuto": [
            "1Ô∏è‚É£ Ouvrez le lien.",
            "2Ô∏è‚É£ Cr√©ez un compte Revolut.",
            "3Ô∏è‚É£ Activez votre carte pour valider."
        ]
    },
    "HelloBank": {
        "lien": "https://www.hellobank.fr/affiliation",
        "tuto": [
            "1Ô∏è‚É£ Cliquez sur le lien.",
            "2Ô∏è‚É£ Remplissez vos infos.",
            "3Ô∏è‚É£ Recevez votre prime."
        ]
    },
    "BankIn": {
        "lien": "https://www.bankin.com/affiliation",
        "tuto": [
            "1Ô∏è‚É£ Inscrivez-vous via le lien.",
            "2Ô∏è‚É£ Connectez vos comptes.",
            "3Ô∏è‚É£ Profitez de vos avantages."
        ]
    },
    "PayPal": {
        "lien": "https://www.paypal.com/referral",
        "tuto": [
            "1Ô∏è‚É£ Connectez-vous √† PayPal.",
            "2Ô∏è‚É£ Invitez un ami via le lien.",
            "3Ô∏è‚É£ Recevez votre prime."
        ]
    },
    "Cr√©dit Agricole": {
        "lien": "https://www.credit-agricole.fr/affiliation",
        "tuto": [
            "1Ô∏è‚É£ Ouvrez le lien.",
            "2Ô∏è‚É£ Choisissez votre agence.",
            "3Ô∏è‚É£ Remplissez le formulaire."
        ]
    },
    "Cr√©dit Lyonnais": {
        "lien": "https://www.lcl.fr/affiliation",
        "tuto": [
            "1Ô∏è‚É£ Acc√©dez au lien.",
            "2Ô∏è‚É£ Cr√©ez un compte.",
            "3Ô∏è‚É£ Recevez votre prime."
        ]
    },
    "Soci√©t√© G√©n√©rale": {
        "lien": "https://particuliers.societegenerale.fr/affiliation",
        "tuto": [
            "1Ô∏è‚É£ Cliquez sur le lien.",
            "2Ô∏è‚É£ Ouvrez un compte.",
            "3Ô∏è‚É£ Recevez vos avantages."
        ]
    },
    "BforBank": {
        "lien": "https://www.bforbank.com/affiliation",
        "tuto": [
            "1Ô∏è‚É£ Suivez le lien.",
            "2Ô∏è‚É£ Remplissez vos infos.",
            "3Ô∏è‚É£ Validez pour la prime."
        ]
    },
    "N26": {
        "lien": "https://n26.com/referral",
        "tuto": [
            "1Ô∏è‚É£ Ouvrez un compte via le lien.",
            "2Ô∏è‚É£ Commandez votre carte.",
            "3Ô∏è‚É£ Utilisez-la pour activer la prime."
        ]
    },
    "Fortuneo": {
        "lien": "https://www.fortuneo.fr/affiliation",
        "tuto": [
            "1Ô∏è‚É£ Cliquez sur le lien.",
            "2Ô∏è‚É£ Cr√©ez un compte.",
            "3Ô∏è‚É£ Profitez de vos avantages."
        ]
    },
    "CoinBase": {
        "lien": "https://www.coinbase.com/join",
        "tuto": [
            "1Ô∏è‚É£ Ouvrez le lien.",
            "2Ô∏è‚É£ Cr√©ez un compte.",
            "3Ô∏è‚É£ Achetez pour activer la prime."
        ]
    },
    "Kraken": {
        "lien": "https://kraken.com/referral",
        "tuto": [
            "1Ô∏è‚É£ Cliquez sur le lien.",
            "2Ô∏è‚É£ Cr√©ez un compte.",
            "3Ô∏è‚É£ Commencez √† trader."
        ]
    },
    "Deblock": {
        "lien": "https://www.deblock.com/affiliation",
        "tuto": [
            "1Ô∏è‚É£ Inscrivez-vous via le lien.",
            "2Ô∏è‚É£ V√©rifiez votre identit√©.",
            "3Ô∏è‚É£ Recevez la prime."
        ]
    },
    "Robinhood": {
        "lien": "https://robinhood.com/referral",
        "tuto": [
            "1Ô∏è‚É£ Ouvrez un compte via le lien.",
            "2Ô∏è‚É£ D√©posez des fonds.",
            "3Ô∏è‚É£ Recevez une action gratuite."
        ]
    }
}

# --- Flask app pour Render ---
app = Flask(__name__)

@app.route('/')
def index():
    return "Bot Telegram Affiliation est actif üöÄ"

@app.route('/webhook', methods=['POST'])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    application.update_queue.put_nowait(update)
    return "OK"

# --- Fonctions du bot ---
async def start(update, context):
    keyboard = []
    row = []
    for i, name in enumerate(plateformes.keys(), start=1):
        row.append(InlineKeyboardButton(name, callback_data=name))
        if i % 2 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üí≥ Choisissez la plateforme :", reply_markup=reply_markup)

async def button(update, context):
    query = update.callback_query
    await query.answer()
    plateforme = plateformes[query.data]
    message = f"**{query.data}**\n\nüîó Lien : {plateforme['lien']}\n\nüìã Tutoriel :\n"
    message += "\n".join(plateforme["tuto"])
    await query.edit_message_text(text=message, parse_mode="Markdown")

# --- Lancer l'application ---
if __name__ == "__main__":
    TOKEN = os.environ.get("
          8274151273:AAGLzb8UVZn7Jqd-49P8CG3CxSMFvlhGcTI
        ")
    PUBLIC_URL = os.environ.get("PUBLIC_URL")

    application = Application.builder().token(TOKEN).build()
    bot = application.bot

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))

    if PUBLIC_URL:
        bot.set_webhook(f"{PUBLIC_URL}/webhook")

    application.run_polling()
